<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年邵多金</title>
  
  <subtitle>半路转行的斜杠中老年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.shaojin.xin/"/>
  <updated>2018-09-11T08:54:38.477Z</updated>
  <id>https://www.shaojin.xin/</id>
  
  <author>
    <name>Jinxin Shao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>建站基础（1）——域名、解析、服务器与数据库的基本认识</title>
    <link href="https://www.shaojin.xin/2018/09/05/%E5%BB%BA%E7%AB%99%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.shaojin.xin/2018/09/05/建站基础（1）——服务器与数据库/</id>
    <published>2018-09-05T13:46:37.000Z</published>
    <updated>2018-09-11T08:54:38.477Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 建站基础（1）——域名、解析、服务器与数据库的基本认识：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印效果图。利用颜色加深和颜色减淡算法，几乎达到了完美的效果。（原创）<br>&lt;!-<br>more –&gt;</excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>当我们用浏览器打开一个网页的时候，我们必须要输入一个网址。  </p><p>网址又叫域名，它是以字母（甚至中文也行哦，试试在浏览器中输入“<a href="招商银行.中国">招商银行.中国</a>”）组成的一个唯一的网络门牌号。理论上域名中可以包含各国的文字。</p><p>我们常见的网址比如“<a href="https://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>”，通常会以www开头，以com结尾。但是域名并不是只有这样的。</p><p>我们将结尾的字符串称为“顶级域名”，比如“com”、“cn”、“edu”、“中国”等。</p><p>顶级域名的种类是有限的，不同的顶级域名注册需要不同的条件。比如“com”通常以公司作为主体，“edu”需要教育部门认证，“org”是政府部门认证。</p><p>顶级域名左边的字符串被称为一级域名，一级域名是用户自定义的。比如“baidu”在这里就是一级域名。</p><p>一级域名的左边被称为二级域名。最常见的二级域名是“www”，但是实际上用户可以自定义任何二级域名。比如“zhidao.baidu.com”、“image.baidu.com”、“map.baidu.com”等。</p><h3 id="如何获得域名"><a href="#如何获得域名" class="headerlink" title="如何获得域名"></a>如何获得域名</h3><p>BAT及其他各家云服务商都提供了域名的购买，我们以阿里的万网为例。我们首先打开万网（<a href="https://wanwang.aliyun.com）" target="_blank" rel="noopener">https://wanwang.aliyun.com）</a></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuz2s5hnyij31kw0viqlj.jpg" alt=""></p><p>注册阿里云账号</p><p>查找自己喜欢的域名，比如“yigeyuming”</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuz2yehtfej31kw0vmqv5.jpg" alt=""></p><p>购买！恭喜你，这个域名就是你的了。注意及时续费，不然域名到期后会被别人重新买走的哦。</p><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>只买了一个域名是没法使用的。</p><p>我们要让大家访问这个域名的时候访问到某个网络地址，就相当于要把域名这个“门牌号”贴到一户人家的“门”上去。</p><p>“贴门牌”这个行为在互联网上叫做“域名解析”。</p><p>我们仍旧以阿里云为例：登录之后进入控制台，进入域名菜单</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuz38vidnbj31kw0viwrc.jpg" alt=""></p><p>我们能够看到所有我们购买的域名。然后对我们需要解析的域名在“操作”列中单击“解析”</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuz3ekphydj31kw0zkk1p.jpg" alt=""></p><p>如果域名未设置过解析到话，这里的记录是空的。不用担心，我们新增一条记录就好。单击“添加记录”：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuz3hh3xx9j31kw0vhah0.jpg" alt=""></p><p>记录类型中可以选择解析的类型，如果是解析到服务器的话，可以用默认的A记录。</p><p>主机记录是域名的前缀。我们可以给不同的前缀设置不同的解析路径。通常以“www”和“@”（等于没有前缀）为多，当然也可以自定义任何前缀。</p><p>记录值一定要填，是你解析到的路径。如果你有服务器的话，填写服务器的外部ip地址就可以以这个域名访问服务器了。</p><p>这里的记录类型除了A记录之外，常用的还有CNAME记录，通常用来将域名解析到一个CDN加速域名。</p><p>至此，域名的解析完成，访问域名就能访问服务器。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>服务器其实就是一台连上网的电脑。只要上了网就会有一个ip地址。通过这个ip地址我们就能访问它。</p><p>把域名解析上去之后通过域名也能访问它。</p><p>服务器有很多端口，就像漫威有很多个宇宙。虽然都叫“地球”，但是不同宇宙里看到的“地球”是不一样的。</p><p>不同的端口能进不同的地方，至于怎么分配，可以在服务器里设置。</p><p>常用的几个端口包括80（网页上用的http协议都是80端口）、443（有些网页是https开头的，这里用的就是443端口）、21（通过FTP给服务器传输文件，用的就是21端口）、22（SSH默认用的是22端口）……</p><p>如果不嫌麻烦，我们其实可以在本地搭建一个物理服务器，但更简单的做法是在云服务供应商那里租用一台服务器。</p><p>租用服务器的时候有两种产品，一个叫“云服务器”，另一个叫“虚拟主机”。这是两种不同的产品。</p><p>云服务器是完整的服务器控制权，相当于整租的一室户“毛胚房”，虽然简陋但是自由，所有地方都可以自己改动。</p><p>虚拟主机是物理主机中分割出来的一个虚拟空间，相当于合租的“精装主卧”，该有的东西房东都提供了，但是如果觉得房东提供的东西不好想要自己改造是不行的。</p><p>虚拟主机适合建一些简单的静态网页，拿来就能用。云服务器更适合做一些更复杂的网络应用。这里主要讨论云服务器。</p><p>第一步依然是在各种云服务器供应商中选一家，这里还是以<a href="https://www.aliyun.com/product/ecs" target="_blank" rel="noopener">阿里云</a>为例：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuz4zdpwhzj31kw0vhgxd.jpg" alt=""></p><p>选择合适的地域、配置、镜像和存储。</p><p>地域选择自己所在地或者预期的主要网络访问者的所在地。</p><p>配置以预期主要的网络应用功能来估算。入门、计算、大数据都有不同的推荐配置。</p><p>镜像选需要的系统和依赖。也可以只选单纯的系统，自己后期按照依赖。系统选择自己熟悉的。这里笔者选着的是ubuntu。</p><p>系统盘按需选择。笔者选择了200G。</p><p>带宽按支付能力选择，越高越好。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuz59pflzqj31kw0vnk2k.jpg" alt=""></p><p>购买成功后进入控制台，进入云服务器菜单，选择相对应的地域，就能看到购买的云服务器实例了。</p><p>在域名解析中，增加A记录的值为云服务器的公网IP地址，域名到服务器的连接就成功了。登录该域名就可以访问服务器了。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库是按照数据结构来组织、存储和管理数据的仓库</p><p>形象但不严谨的形容，数据库就是分好类的一堆Excel表格（误）</p><p>根据数据的结构类型可以分为关系型数据库和非关系型数据库。</p><p>关系型数据库（SQL）可以形象的理解为Excel表格，根据行列来查询一个值。目前常用的有MySQL、Oracle、SQL server、PostgreSQL等。</p><p>非关系型数据库（NOSQL）可以形象的理解为一个dictionary，可以通过key值取出对应的value值。对于dictionary不了解的朋友可以去看我的编程教程，大部分语言里都提到了这个概念。常用的有MongoDB，Redis、CouchDB。</p><p>要拥有自己的数据库，依然可以找云服务供应商。所有的云服务供应商都提供数据库的租赁服务。</p><p>这里依然以<a href="https://www.aliyun.com/product/rds/postgresql" target="_blank" rel="noopener">阿里云</a>为例：</p><p><img src="http://i66.tinypic.com/wa6k50.png" alt="image"></p><p>在阿里云平台上选择需要的数据库类型。个人推荐（PostgreSQL）。</p><p>点击立即购买，选择地域与配置。</p><p><img src="http://i64.tinypic.com/2yl9vfd.png" alt=""></p><p>完成购买后，在管理控制台打开数据库面板，选择地域，就能看到刚买的数据库了。</p><p><img src="http://i67.tinypic.com/11rdh7p.jpg" alt=""></p><p>点击管理，进入数据库管理页面，就能看到数据库的相关信息。外网IP和端口号即为登录数据库的host和Port。</p><p><img src="http://i65.tinypic.com/a4bwab.jpg" alt=""></p><p>进入账户面板，新增用户，记录下用户名和密码，即为登录数据库的user和password。</p><p><img src="http://i63.tinypic.com/b6exbk.png" alt=""></p><p>我们可以直接点击“登录数据库”，通过云服务商提供的工具管理数据库，但大多数情况下我们会选择第三方工具来管理数据库。第三方工具主要分为命令行和桌面软件两种方式。</p><h3 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h3><p>推荐<a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">Navicat</a>这款软件，操作十分简单：</p><ol><li>在上面的地址中打开网页，选择合适的版本下载安装。</li><li>打开软件，点击菜单中的connection，选择数据库的类型。<br><img src="http://i63.tinypic.com/2mpllqf.jpg" alt="image"></li><li><ul><li>Connection Name是软件对该连接的名字，可以自定义。</li><li>Add To 可以选择是否将该连接加入到navicat云中，这样只要登录同一个账户，在不同设备中都可以共享连接设置。推荐加入到navicat云。</li><li>Host 填入我们的数据库的外网IP地址。</li><li>Port 填入我们的数据库的外网端口号。</li><li>Intial Database是默认初始化的数据库。如果我们需要初始化打开一个自定义的数据库，可以在这里设置。推荐默认设置。</li><li>User Name 填入我们的数据库用户名。</li><li>Password 填入该用户对应的密码。<br><img src="http://i67.tinypic.com/149y29u.png" alt=""></li></ul></li><li>连接到数据库后，我们能看到数据库的结构是这样的：<br><img src="http://i67.tinypic.com/5b48er.jpg" alt=""></li><li>当我们打开一个表，看到数据表具体长这样：<br><img src="http://i65.tinypic.com/spwtfs.png" alt=""></li><li>点击“Query”新增一个查询，我们可以在此输入SQL代码进行数据的查询、更新、管理。<br><img src="http://i65.tinypic.com/2h3y1sk.png" alt=""></li></ol><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ol><li>首先使用ssh登录服务器：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@外网地址</span><br></pre></td></tr></table></figure><ol start="2"><li>登录后以以下命令进入数据库（PostgreSQL为例）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">psql -h host -p port -d main_database -U username </span><br><span class="line">//-h 是主机域名,比如192.168.123.82</span><br><span class="line">//-p 是端口号,比如32768</span><br><span class="line">//-d 是默认数据库名字,比如amap</span><br><span class="line">//-U 是用户名,一般为各位姓名拼音</span><br></pre></td></tr></table></figure><ol start="3"><li>敲回车后通常需要输入密码,如果批量执行,可以把密码提前写进系统变量:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PGPASSWORD=12345</span><br></pre></td></tr></table></figure><p>然后在psql语句加“-w”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h host -p port -d main_database -U username -w</span><br></pre></td></tr></table></figure><p>这样就可以无密码登录了</p></the>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 建站基础（1）——域名、解析、服务器与数据库的基本认识：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印
      
    
    </summary>
    
      <category term="website" scheme="https://www.shaojin.xin/categories/website/"/>
    
    
      <category term="服务器,数据库" scheme="https://www.shaojin.xin/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>图虫网图片去除水印</title>
    <link href="https://www.shaojin.xin/2018/08/31/%E5%9B%BE%E8%99%AB%E7%BD%91%E5%9B%BE%E7%89%87%E5%8E%BB%E6%B0%B4%E5%8D%B0/"/>
    <id>https://www.shaojin.xin/2018/08/31/图虫网图片去水印/</id>
    <published>2018-08-31T03:49:37.000Z</published>
    <updated>2018-08-31T03:56:55.013Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 图虫网图片去除水印：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印效果图。利用颜色加深和颜色减淡算法，几乎达到了完美的效果。（原创）<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="OpenCV基础"><a href="#OpenCV基础" class="headerlink" title="OpenCV基础"></a>OpenCV基础</h2><blockquote><p>OpenCV（Open Source Computer Vision Library）是一个跨平台计算机视觉库，实现了图像处理和计算机视觉方面的很多通用算法</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>你要确定自己的python版本是3.x，在命令行窗口输入python<br><img src="https://ws1.sinaimg.cn/large/8500fdd6gy1fusb2k487tj20nz055wee.jpg" alt="image"></li><li>需要下载和安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=53587" target="_blank" rel="noopener">Microsoft Visual C++ 2015 Redistributable</a></li><li>下载对应版本的Numpy，<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="noopener">下载地址</a>，注意版本号和自己的Python版本对应</li><li>下载对应版本的OpenCV，<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv" target="_blank" rel="noopener">下载地址</a>，注意版本号和自己的Python版本对应。我的Python是3.6.6，我下载的opencv就是<a href="https://download.lfd.uci.edu/pythonlibs/o4uhg4xd/opencv_python-3.4.2-cp36-cp36m-win_amd64.whl" target="_blank" rel="noopener">opencv_python-3.4.2-cp36-cp36m-win_amd64.whl</a></li><li>到你存放上面两个文件的目录下，打开命令行窗口，输入以下命令进行安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy-1.13.1+mkl-cp36-cp36m-win32.whl(此处为你自己下载的相应的文件名）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv_python-3.3.0-cp36-cp36m-win32.whl(此处为你自己下载的相应的文件名）</span><br></pre></td></tr></table></figure><ul><li>在python命令行输入下面两条，如果没有报错，就表示OK 了<br><img src="https://ws1.sinaimg.cn/large/8500fdd6gy1fusb3mguhxj20ee04v743.jpg" alt="image"></li></ul><hr><h2 id="opencv的常用操作"><a href="#opencv的常用操作" class="headerlink" title="opencv的常用操作"></a>opencv的常用操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">#矩阵形式读取图像为三维列表，每一维分别代表 行、列、像素，像素维度列表中依次为BGR三个颜色通道</span><br><span class="line">img = cv2.imread(&quot;test.jpg&quot;)</span><br><span class="line"></span><br><span class="line">print img.shape #利用numpy的shape方法显示图像矩阵的三维尺寸信息，例如：(533, 800, 3)</span><br><span class="line"></span><br><span class="line">img2 = img.copy() #复制图像</span><br><span class="line">cv2.imwrite(&apos;save.jpg&apos;, img2) #保存</span><br></pre></td></tr></table></figure><hr><h2 id="基于OpenCV的PS图层混合算法去水印方案"><a href="#基于OpenCV的PS图层混合算法去水印方案" class="headerlink" title="基于OpenCV的PS图层混合算法去水印方案"></a>基于OpenCV的PS图层混合算法去水印方案</h2><p>主要借鉴了PS中颜色加深和颜色减淡算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">下列公式中，A代表了上面图层像素的色彩值（A=像素值/255），B代表下面图层像素的色彩值（B=像素值/255），C代表了混合像素的色彩值（真实的结果像素值应该为255*C）。该公式也应用于层蒙板。</span><br><span class="line"></span><br><span class="line">颜色加深模式：查看每个通道的颜色信息，通过增加“对比度”使底色的颜色变暗来反映绘图色，和白色混合没变化。</span><br><span class="line"></span><br><span class="line">Color Burn 颜色加深:C=1-(1-B)/A</span><br><span class="line"></span><br><span class="line">该模式如果上层越暗，则下层获取的光越少，如果上层为全黑色，则下层越黑，如果上层为全白色，则根本不会影响下层。结果最亮的地方不会高于下层的像素值。</span><br><span class="line"></span><br><span class="line">颜色减淡模式：</span><br><span class="line"></span><br><span class="line">查看每个通道的颜色信息，通过降低“对比度”使底色的颜色变亮来反映绘图色，和黑色混合没变化。</span><br><span class="line"></span><br><span class="line">Color Dodge 颜色减淡</span><br><span class="line"></span><br><span class="line">C=B/(1-A)</span><br><span class="line"></span><br><span class="line">该模式下，上层的亮度决定了下层的暴露程度。如果上层越亮，下层获取的光越多，也就是越亮。如果上层是纯黑色，也就是没有亮度，则根本不会影响下层。如果上层是纯白色，则下层除了像素为255的地方暴露外，其他地方全部为白色（也就是255，不暴露）。结果最黑的地方不会低于下层的像素值。</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import os</span><br><span class="line">import cv2</span><br><span class="line">import numpy</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">def get_filename(folder):</span><br><span class="line">    listdir = []</span><br><span class="line"></span><br><span class="line">    def _get_filename(folder):</span><br><span class="line">        for lists in os.listdir(folder):</span><br><span class="line">            path = os.path.join(folder, lists)</span><br><span class="line">            type = os.path.splitext(path)[1]</span><br><span class="line">            if type.lower() == &apos;.jpeg&apos; or type.lower() == &quot;.jpg&quot; or type.lower() == &quot;.png&quot; :</span><br><span class="line">                path = path.replace(open_path, &apos;&apos;) </span><br><span class="line">                listdir.append(path)</span><br><span class="line">            elif os.path.isdir(path):</span><br><span class="line">                _get_filename(path)</span><br><span class="line"></span><br><span class="line">    _get_filename(folder)  # get all .jpg filename in folder recursively</span><br><span class="line">    return listdir</span><br><span class="line"></span><br><span class="line">def removelogo(mask_black_dir,mask_white_dir,path,filelist,save_dir):</span><br><span class="line">    for o in  range(len(filelist)):</span><br><span class="line">        src = cv2.imread(path+filelist[o])</span><br><span class="line">        mask_black = cv2.imread(mask_black_dir)</span><br><span class="line">        mask_white = cv2.imread(mask_white_dir)</span><br><span class="line">        save = numpy.zeros(src.shape, numpy.uint8)</span><br><span class="line">        for row in range(src.shape[0]):</span><br><span class="line">                for col in range(src.shape[1]):</span><br><span class="line">                    for channel in range(src.shape[2]):</span><br><span class="line">                        if (row&gt;(src.shape[0]-mask_white.shape[0]) and col&gt;(src.shape[1]-mask_white.shape[1])) :</span><br><span class="line">                            val_src = src[row, col, channel]</span><br><span class="line">                            val_black = mask_black[row-src.shape[0]+mask_white.shape[0], col-src.shape[1]+mask_white.shape[1], channel]</span><br><span class="line">                            val_white = mask_white[row-src.shape[0]+mask_white.shape[0], col-src.shape[1]+mask_white.shape[1], channel]</span><br><span class="line">                            if val_white == 0:</span><br><span class="line">                                val_1 = 0</span><br><span class="line">                            else:</span><br><span class="line">                                val_1 = 255-256*(255-val_src)/val_white</span><br><span class="line">                                if val_1&lt;0:val_1 = 0</span><br><span class="line">                            if val_black == 255:</span><br><span class="line">                                val_2 = 255</span><br><span class="line">                            else:</span><br><span class="line">                                val_2 = 256*val_1/(255-val_black)</span><br><span class="line">                                if val_2&gt;255:val_2 = 255</span><br><span class="line">                            save[row, col, channel] = val_2</span><br><span class="line">                        else:save[row, col, channel] = src[row, col, channel]</span><br><span class="line">        if not os.path.exists(save_dir):</span><br><span class="line">                os.makedirs(save_dir)</span><br><span class="line">        cv2.imwrite(save_dir+filelist[o], save)</span><br><span class="line">        print(&quot;%6.3f%%&quot;%(100*o/len(filelist)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    removelogo(sys.argv[1],sys.argv[2],sys.argv[3],get_filename(sys.argv[3]),sys.argv[4])</span><br></pre></td></tr></table></figure><blockquote><p>使用方法：python xxx.py ./mask_black.jpg ./mask_white.jpg /formpath /topath<br>使用时依次传4个参数进去：黑底水印图路径，白底水印图路径，需要去水印的图片文件夹路径，处理之后保存图片的路径（如果不存在会自动新建文件夹）</p></blockquote><hr><h3 id="去水印前的原始图片："><a href="#去水印前的原始图片：" class="headerlink" title="去水印前的原始图片："></a>去水印前的原始图片：</h3><p><img src="http://i67.tinypic.com/bja52t.jpg" alt="去水印前（原始图片）"></p><h3 id="去水印后的图片效果："><a href="#去水印后的图片效果：" class="headerlink" title="去水印后的图片效果："></a>去水印后的图片效果：</h3><p><img src="http://i68.tinypic.com/2z4wy9s.jpg" alt="去水印后（效果图片）"></p><h3 id="黑底水印图："><a href="#黑底水印图：" class="headerlink" title="黑底水印图："></a>黑底水印图：</h3><p><img src="http://i63.tinypic.com/swwbyb.png" alt="image"></p><h3 id="白底水印图："><a href="#白底水印图：" class="headerlink" title="白底水印图："></a>白底水印图：</h3><p><img src="http://i68.tinypic.com/24vpavt.png" alt="image"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 图虫网图片去除水印：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印效果图。利用颜色加深和颜色减淡算法，几乎达到了完美的效果。（原创）&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.shaojin.xin/categories/python/"/>
    
    
      <category term="opencv" scheme="https://www.shaojin.xin/tags/opencv/"/>
    
  </entry>
  
</feed>
