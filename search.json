[{"title":"建站基础（1）——域名、解析、服务器与数据库的基本认识","url":"/2018/09/05/建站基础（1）——服务器与数据库/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印效果图。利用颜色加深和颜色减淡算法，几乎达到了完美的效果。（原创）\n<!-\nmore -->\n<The rest of contents | 余下全文>\n\n## 域名\n\n当我们用浏览器打开一个网页的时候，我们必须要输入一个网址。  \n\n网址又叫域名，它是以字母（甚至中文也行哦，试试在浏览器中输入“[招商银行.中国](招商银行.中国)”）组成的一个唯一的网络门牌号。理论上域名中可以包含各国的文字。\n\n我们常见的网址比如“[www.baidu.com](https://www.baidu.com/)”，通常会以www开头，以com结尾。但是域名并不是只有这样的。\n\n我们将结尾的字符串称为“顶级域名”，比如“com”、“cn”、“edu”、“中国”等。\n\n顶级域名的种类是有限的，不同的顶级域名注册需要不同的条件。比如“com”通常以公司作为主体，“edu”需要教育部门认证，“org”是政府部门认证。\n\n顶级域名左边的字符串被称为一级域名，一级域名是用户自定义的。比如“baidu”在这里就是一级域名。\n\n一级域名的左边被称为二级域名。最常见的二级域名是“www”，但是实际上用户可以自定义任何二级域名。比如“zhidao.baidu.com”、“image.baidu.com”、“map.baidu.com”等。\n### 如何获得域名\n\nBAT及其他各家云服务商都提供了域名的购买，我们以阿里的万网为例。我们首先打开万网（https://wanwang.aliyun.com）\n\n![](https://ws4.sinaimg.cn/large/006tNbRwgy1fuz2s5hnyij31kw0viqlj.jpg)\n\n注册阿里云账号\n\n查找自己喜欢的域名，比如“yigeyuming”\n\n![](https://ws4.sinaimg.cn/large/006tNbRwgy1fuz2yehtfej31kw0vmqv5.jpg)\n\n购买！恭喜你，这个域名就是你的了。注意及时续费，不然域名到期后会被别人重新买走的哦。\n\n---\n## 解析\n\n只买了一个域名是没法使用的。\n\n我们要让大家访问这个域名的时候访问到某个网络地址，就相当于要把域名这个“门牌号”贴到一户人家的“门”上去。\n\n“贴门牌”这个行为在互联网上叫做“域名解析”。\n\n我们仍旧以阿里云为例：登录之后进入控制台，进入域名菜单\n\n![](https://ws1.sinaimg.cn/large/006tNbRwgy1fuz38vidnbj31kw0viwrc.jpg)\n\n我们能够看到所有我们购买的域名。然后对我们需要解析的域名在“操作”列中单击“解析”\n\n![](https://ws2.sinaimg.cn/large/006tNbRwgy1fuz3ekphydj31kw0zkk1p.jpg)\n\n如果域名未设置过解析到话，这里的记录是空的。不用担心，我们新增一条记录就好。单击“添加记录”：\n\n![](https://ws2.sinaimg.cn/large/006tNbRwgy1fuz3hh3xx9j31kw0vhah0.jpg)\n\n记录类型中可以选择解析的类型，如果是解析到服务器的话，可以用默认的A记录。\n\n主机记录是域名的前缀。我们可以给不同的前缀设置不同的解析路径。通常以“www”和“@”（等于没有前缀）为多，当然也可以自定义任何前缀。\n\n记录值一定要填，是你解析到的路径。如果你有服务器的话，填写服务器的外部ip地址就可以以这个域名访问服务器了。\n\n这里的记录类型除了A记录之外，常用的还有CNAME记录，通常用来将域名解析到一个CDN加速域名。\n\n至此，域名的解析完成，访问域名就能访问服务器。\n\n## 服务器\n\n服务器其实就是一台连上网的电脑。只要上了网就会有一个ip地址。通过这个ip地址我们就能访问它。\n\n把域名解析上去之后通过域名也能访问它。\n\n服务器有很多端口，就像漫威有很多个宇宙。虽然都叫“地球”，但是不同宇宙里看到的“地球”是不一样的。\n\n不同的端口能进不同的地方，至于怎么分配，可以在服务器里设置。\n\n常用的几个端口包括80（网页上用的http协议都是80端口）、443（有些网页是https开头的，这里用的就是443端口）、21（通过FTP给服务器传输文件，用的就是21端口）、22（SSH默认用的是22端口）……\n\n如果不嫌麻烦，我们其实可以在本地搭建一个物理服务器，但更简单的做法是在云服务供应商那里租用一台服务器。\n\n租用服务器的时候有两种产品，一个叫“云服务器”，另一个叫“虚拟主机”。这是两种不同的产品。\n\n云服务器是完整的服务器控制权，相当于整租的一室户“毛胚房”，虽然简陋但是自由，所有地方都可以自己改动。\n\n虚拟主机是物理主机中分割出来的一个虚拟空间，相当于合租的“精装主卧”，该有的东西房东都提供了，但是如果觉得房东提供的东西不好想要自己改造是不行的。\n\n虚拟主机适合建一些简单的静态网页，拿来就能用。云服务器更适合做一些更复杂的网络应用。这里主要讨论云服务器。\n\n第一步依然是在各种云服务器供应商中选一家，这里还是以[阿里云](https://www.aliyun.com/product/ecs)为例：\n\n![](https://ws2.sinaimg.cn/large/006tNbRwgy1fuz4zdpwhzj31kw0vhgxd.jpg)\n\n选择合适的地域、配置、镜像和存储。\n\n地域选择自己所在地或者预期的主要网络访问者的所在地。\n\n配置以预期主要的网络应用功能来估算。入门、计算、大数据都有不同的推荐配置。\n\n镜像选需要的系统和依赖。也可以只选单纯的系统，自己后期按照依赖。系统选择自己熟悉的。这里笔者选着的是ubuntu。\n\n系统盘按需选择。笔者选择了200G。\n\n带宽按支付能力选择，越高越好。\n\n![](https://ws3.sinaimg.cn/large/006tNbRwgy1fuz59pflzqj31kw0vnk2k.jpg)\n\n购买成功后进入控制台，进入云服务器菜单，选择相对应的地域，就能看到购买的云服务器实例了。\n\n在域名解析中，增加A记录的值为云服务器的公网IP地址，域名到服务器的连接就成功了。登录该域名就可以访问服务器了。\n\n\n## 数据库\n\n数据库是按照数据结构来组织、存储和管理数据的仓库\n\n形象但不严谨的形容，数据库就是分好类的一堆Excel表格（误）\n\n根据数据的结构类型可以分为关系型数据库和非关系型数据库。\n\n关系型数据库（SQL）可以形象的理解为Excel表格，根据行列来查询一个值。目前常用的有MySQL、Oracle、SQL server、PostgreSQL等。\n\n非关系型数据库（NOSQL）可以形象的理解为一个dictionary，可以通过key值取出对应的value值。对于dictionary不了解的朋友可以去看我的编程教程，大部分语言里都提到了这个概念。常用的有MongoDB，Redis、CouchDB。\n\n要拥有自己的数据库，依然可以找云服务供应商。所有的云服务供应商都提供数据库的租赁服务。\n\n这里依然以[阿里云](https://www.aliyun.com/product/rds/postgresql)为例：\n\n![image](http://i66.tinypic.com/wa6k50.png)\n\n在阿里云平台上选择需要的数据库类型。个人推荐（PostgreSQL）。\n\n点击立即购买，选择地域与配置。\n\n![](http://i64.tinypic.com/2yl9vfd.png)\n\n完成购买后，在管理控制台打开数据库面板，选择地域，就能看到刚买的数据库了。\n\n![](http://i67.tinypic.com/11rdh7p.jpg)\n\n点击管理，进入数据库管理页面，就能看到数据库的相关信息。外网IP和端口号即为登录数据库的host和Port。\n\n![](http://i65.tinypic.com/a4bwab.jpg)\n\n进入账户面板，新增用户，记录下用户名和密码，即为登录数据库的user和password。\n\n![](http://i63.tinypic.com/b6exbk.png)\n\n我们可以直接点击“登录数据库”，通过云服务商提供的工具管理数据库，但大多数情况下我们会选择第三方工具来管理数据库。第三方工具主要分为命令行和桌面软件两种方式。\n\n\n### 桌面\n\n推荐[Navicat](https://www.navicat.com.cn/)这款软件，操作十分简单：\n\n1. 在上面的地址中打开网页，选择合适的版本下载安装。\n2. 打开软件，点击菜单中的connection，选择数据库的类型。\n![image](http://i63.tinypic.com/2mpllqf.jpg)\n3. - Connection Name是软件对该连接的名字，可以自定义。\n   - Add To 可以选择是否将该连接加入到navicat云中，这样只要登录同一个账户，在不同设备中都可以共享连接设置。推荐加入到navicat云。\n   - Host 填入我们的数据库的外网IP地址。\n   - Port 填入我们的数据库的外网端口号。\n   - Intial Database是默认初始化的数据库。如果我们需要初始化打开一个自定义的数据库，可以在这里设置。推荐默认设置。\n   - User Name 填入我们的数据库用户名。\n   - Password 填入该用户对应的密码。\n![](http://i67.tinypic.com/149y29u.png)\n4. 连接到数据库后，我们能看到数据库的结构是这样的：\n![](http://i67.tinypic.com/5b48er.jpg)\n5. 当我们打开一个表，看到数据表具体长这样：\n![](http://i65.tinypic.com/spwtfs.png)\n6. 点击“Query”新增一个查询，我们可以在此输入SQL代码进行数据的查询、更新、管理。\n![](http://i65.tinypic.com/2h3y1sk.png)\n\n### 命令行\n\n1. 首先使用ssh登录服务器：\n\n```\nssh 用户名@外网地址\n```\n\n2. 登录后以以下命令进入数据库（PostgreSQL为例）\n\n\n```\npsql -h host -p port -d main_database -U username \n//-h 是主机域名,比如192.168.123.82\n//-p 是端口号,比如32768\n//-d 是默认数据库名字,比如amap\n//-U 是用户名,一般为各位姓名拼音\n```\n3. 敲回车后通常需要输入密码,如果批量执行,可以把密码提前写进系统变量:\n\n```\nexport PGPASSWORD=12345\n```\n\n然后在psql语句加“-w”:\n\n```\npsql -h host -p port -d main_database -U username -w\n```\n这样就可以无密码登录了","tags":["服务器,数据库"],"categories":["website"]},{"title":"图虫网图片去除水印","url":"/2018/08/31/图虫网图片去水印/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n利用openCV的图层混合算法去除水印，需要使用到一张纯黑背景下的水印效果图和一张纯白背景下的水印效果图。利用颜色加深和颜色减淡算法，几乎达到了完美的效果。（原创）\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## OpenCV基础\n\n> OpenCV（Open Source Computer Vision Library）是一个跨平台计算机视觉库，实现了图像处理和计算机视觉方面的很多通用算法\n\n## 环境搭建\n- 你要确定自己的python版本是3.x，在命令行窗口输入python\n![image](https://ws1.sinaimg.cn/large/8500fdd6gy1fusb2k487tj20nz055wee.jpg)\n- 需要下载和安装[Microsoft Visual C++ 2015 Redistributable](https://www.microsoft.com/en-us/download/details.aspx?id=53587)\n- 下载对应版本的Numpy，[下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy)，注意版本号和自己的Python版本对应\n- 下载对应版本的OpenCV，[下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv)，注意版本号和自己的Python版本对应。我的Python是3.6.6，我下载的opencv就是[opencv_python-3.4.2-cp36-cp36m-win_amd64.whl](https://download.lfd.uci.edu/pythonlibs/o4uhg4xd/opencv_python-3.4.2-cp36-cp36m-win_amd64.whl)\n- 到你存放上面两个文件的目录下，打开命令行窗口，输入以下命令进行安装\n\n```\npip install numpy-1.13.1+mkl-cp36-cp36m-win32.whl(此处为你自己下载的相应的文件名） \n```\n\n```\npip install opencv_python-3.3.0-cp36-cp36m-win32.whl(此处为你自己下载的相应的文件名）\n```\n- 在python命令行输入下面两条，如果没有报错，就表示OK 了\n![image](https://ws1.sinaimg.cn/large/8500fdd6gy1fusb3mguhxj20ee04v743.jpg)\n---\n## opencv的常用操作\n\n```\n# -*- coding: utf-8 -*-\nimport cv2\n\n#矩阵形式读取图像为三维列表，每一维分别代表 行、列、像素，像素维度列表中依次为BGR三个颜色通道\nimg = cv2.imread(\"test.jpg\")\n\nprint img.shape #利用numpy的shape方法显示图像矩阵的三维尺寸信息，例如：(533, 800, 3)\n\nimg2 = img.copy() #复制图像\ncv2.imwrite('save.jpg', img2) #保存\n```\n---\n## 基于OpenCV的PS图层混合算法去水印方案\n主要借鉴了PS中颜色加深和颜色减淡算法\n```\n下列公式中，A代表了上面图层像素的色彩值（A=像素值/255），B代表下面图层像素的色彩值（B=像素值/255），C代表了混合像素的色彩值（真实的结果像素值应该为255*C）。该公式也应用于层蒙板。\n\n颜色加深模式：查看每个通道的颜色信息，通过增加“对比度”使底色的颜色变暗来反映绘图色，和白色混合没变化。\n\nColor Burn 颜色加深:C=1-(1-B)/A\n\n该模式如果上层越暗，则下层获取的光越少，如果上层为全黑色，则下层越黑，如果上层为全白色，则根本不会影响下层。结果最亮的地方不会高于下层的像素值。\n\n颜色减淡模式：\n\n查看每个通道的颜色信息，通过降低“对比度”使底色的颜色变亮来反映绘图色，和黑色混合没变化。\n\nColor Dodge 颜色减淡\n\nC=B/(1-A)\n\n该模式下，上层的亮度决定了下层的暴露程度。如果上层越亮，下层获取的光越多，也就是越亮。如果上层是纯黑色，也就是没有亮度，则根本不会影响下层。如果上层是纯白色，则下层除了像素为255的地方暴露外，其他地方全部为白色（也就是255，不暴露）。结果最黑的地方不会低于下层的像素值。\n\n```\n## 代码\n```\n# -*- coding: utf-8 -*-\nimport os\nimport cv2\nimport numpy\nfrom PIL import Image\n\ndef get_filename(folder):\n    listdir = []\n\n    def _get_filename(folder):\n        for lists in os.listdir(folder):\n            path = os.path.join(folder, lists)\n            type = os.path.splitext(path)[1]\n            if type.lower() == '.jpeg' or type.lower() == \".jpg\" or type.lower() == \".png\" :\n                path = path.replace(open_path, '') \n                listdir.append(path)\n            elif os.path.isdir(path):\n                _get_filename(path)\n\n    _get_filename(folder)  # get all .jpg filename in folder recursively\n    return listdir\n\ndef removelogo(mask_black_dir,mask_white_dir,path,filelist,save_dir):\n    for o in  range(len(filelist)):\n        src = cv2.imread(path+filelist[o])\n        mask_black = cv2.imread(mask_black_dir)\n        mask_white = cv2.imread(mask_white_dir)\n        save = numpy.zeros(src.shape, numpy.uint8)\n        for row in range(src.shape[0]):\n                for col in range(src.shape[1]):\n                    for channel in range(src.shape[2]):\n                        if (row>(src.shape[0]-mask_white.shape[0]) and col>(src.shape[1]-mask_white.shape[1])) :\n                            val_src = src[row, col, channel]\n                            val_black = mask_black[row-src.shape[0]+mask_white.shape[0], col-src.shape[1]+mask_white.shape[1], channel]\n                            val_white = mask_white[row-src.shape[0]+mask_white.shape[0], col-src.shape[1]+mask_white.shape[1], channel]\n                            if val_white == 0:\n                                val_1 = 0\n                            else:\n                                val_1 = 255-256*(255-val_src)/val_white\n                                if val_1<0:val_1 = 0\n                            if val_black == 255:\n                                val_2 = 255\n                            else:\n                                val_2 = 256*val_1/(255-val_black)\n                                if val_2>255:val_2 = 255\n                            save[row, col, channel] = val_2\n                        else:save[row, col, channel] = src[row, col, channel]\n        if not os.path.exists(save_dir):\n                os.makedirs(save_dir)\n        cv2.imwrite(save_dir+filelist[o], save)\n        print(\"%6.3f%%\"%(100*o/len(filelist)))\n\n\nif __name__ == \"__main__\":\n    removelogo(sys.argv[1],sys.argv[2],sys.argv[3],get_filename(sys.argv[3]),sys.argv[4])\n\n\n```\n> 使用方法：python xxx.py ./mask_black.jpg ./mask_white.jpg /formpath /topath  \n使用时依次传4个参数进去：黑底水印图路径，白底水印图路径，需要去水印的图片文件夹路径，处理之后保存图片的路径（如果不存在会自动新建文件夹）\n\n---\n### 去水印前的原始图片：\n![去水印前（原始图片）](http://i67.tinypic.com/bja52t.jpg)\n### 去水印后的图片效果：\n![去水印后（效果图片）](http://i68.tinypic.com/2z4wy9s.jpg)\n### 黑底水印图：\n![image](http://i63.tinypic.com/swwbyb.png)\n### 白底水印图：\n![image](http://i68.tinypic.com/24vpavt.png)","tags":["opencv"],"categories":["python"]}]